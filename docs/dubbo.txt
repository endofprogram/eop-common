com.alibaba.dubbo.config.spring.context.annotation

ImportBeanDefinitionRegistrar：接口，导入bean定义登记员
1、当处理@Configuration类时，该接口的实现类用来注册bean定义。
2、与@Configuration类和ImportSelector接口一道，都可以用于@Import注解
3、可以实现以下Aware接口：
EnvironmentAware
BeanFactoryAware 
BeanClassLoaderAware 
ResourceLoaderAware 

AnnotationMetadata importingClassMetadata：接口，注解元数据
用于访问导入类的注解，导入类指的是那个@Configuration类。
即标有@DubboComponentScan那个类。

BeanDefinitionRegistry registry：接口，bean定义登记处
它其实就是spring的容器本身

DubboComponentScanRegistrar implements ImportBeanDefinitionRegistrar
dubbo组件扫描登记员。dubbo组件一般只@Service和@Reference。

BeanFactoryPostProcessor：接口，bean工厂后处理器
bean定义被注册后，用于修改bean的定义，因为此时bean尚未实例化。

BeanDefinitionRegistryPostProcessor extends BeanFactoryPostProcessor
接口，bean定义注册后处理器。
用于修改bean定义注册，执行完后再执行bean工厂后处理器

ServiceAnnotationBeanPostProcessor implements BeanDefinitionRegistryPostProcessor
Service注解bean后处理器，用来注册@Service标注的bean
实际使用DubboClassPathBeanDefinitionScanner进行扫描，将useDefaultFilters设为false，
把dubbo的Service.class注解用作过滤器
1、首先注册@Service标注的bean（用来提供服务）
2、其次注册一个相关的ServiceBean.class bean（用来暴露服务）

ClassPathBeanDefinitionScanner：类路径bean定义扫描器
1、在类路径上检测候选bean，注册相应的bean定义到登记处
2、通过类型过滤器来检测候选bean，默认的过滤器是@Component，@Repository，@Service或@Controller
也支持Java EE 6 的 javax.annotation.ManagedBean 和 JSR-330 的 javax.inject.Named

DubboClassPathBeanDefinitionScanner extends ClassPathBeanDefinitionScanner：只是简单继承
扫描注册和dubbo相关的bean

ReferenceAnnotationBeanPostProcessor：@Reference注解的bean后处理器
用来处理@Reference字段的注入

 private final ConcurrentMap<String, InjectionMetadata> injectionMetadataCache =
            new ConcurrentHashMap<String, InjectionMetadata>(256);
注入元数据缓存：
key是要处理的bean的名称或类的名称（为了向后兼容），value包含了需要被注入的字段或发方法等信息。

private final ConcurrentMap<String, ReferenceBean<?>> referenceBeansCache =
            new ConcurrentHashMap<String, ReferenceBean<?>>();
ReferenceBean<?>缓存：
key = reference.group() + "/" + interfaceName + ":" + reference.version();
说明在dubbo里面，所属组，接口名称，版本号三者组合起来才具有唯一性，可以映射到一个服务提供者提供的服务。
value是ReferenceBean<?>，它属于dubbo里的内容，可以理解为它管理了对远程服务的调用。

@Override
    public PropertyValues postProcessPropertyValues(
            PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)
在该方法里完成注入过程。分为两步，一是从bean中检测出需要注入的元数据，二是把对应的值注入进去。

private InjectionMetadata findReferenceMetadata(String beanName, Class<?> clazz, PropertyValues pvs)
1、如果缓存中有，且正常，则返回缓存
2、如果缓存中没有，则构建一个，放入缓存
3、如果缓存中有，但不正常，则清除旧缓存对应的属性值，重新生成一个放入缓存

private InjectionMetadata buildReferenceMetadata(final Class<?> beanClass)
构建元数据。分两步，一是从bean中找出需要注入的字段，二是从bean中找出需要注入的方法。

private List<InjectionMetadata.InjectedElement> findFieldReferenceMetadata(final Class<?> beanClass)
找出所有需要被注入的字段。
private class ReferenceFieldElement extends InjectionMetadata.InjectedElement
继承父类，重写注入方法。

private List<InjectionMetadata.InjectedElement> findMethodReferenceMetadata(final Class<?> beanClass)
找出所有需要被注入的方法。
private class ReferenceMethodElement extends InjectionMetadata.InjectedElement
继承父类，重写注入方法。

BeanPostProcessor：接口，bean后处理器
1、一个工厂钩子，允许自定义修改新的bean实例，如检测标记接口或用代理包装它
2、容器能在它的所有bean定义中自动检查出BeanPostProcessor的实现类，并把它们应用于任何后续创建的bean实例，
普通的bean工厂允许以编程的方式注册bean后处理器，可以应用于该工厂创建出的所有bean实例。
3、一般通过标识接口来区分不同的bean，进行相应处理。（不同的bean实现不同的接口，便于bean后处理器区分）
它的两个方法的调用时间：
1、实例化后（且已完成知名属性设置和自动装配），初始化前。（典型的初始化方法尚未执行）
2、初始化后。（典型的初始化方法已经执行）

InstantiationAwareBeanPostProcessor extends BeanPostProcessor：接口，实例化感知bean后处理器
该接口能够感知bean的实例化过程
1、添加一个实例化前的回调方法和一个实例化后但是显式的属性设置或自动装配发生前的回调方法。
2、典型地用于压制特殊目标bean的默认实例化，如为特殊的目标源（池化目标，延迟实例化目标等）创建代理，
或实现额外的注入策略，像字段注入。
注：这个接口具有特殊目的，主要用于框架内部使用。如果可能的话建议我们使用普通的BeanPostProcessor接口，
或继承InstantiationAwareBeanPostProcessorAdapter类来屏蔽框架日后对该接口的扩展。
它有三个方法：
1、Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName)
a）在bean实例化前执行，如果返回null，则bean正常实例化。
b）如果返回非null，则它一定是一个代理，bean的实例化过程被短路，即bean没有被实例化（通过代理压制了bean的实例化）
	此时仅有的进一步处理是执行postProcessAfterInitialization方法。
c）此方法仅用于bean定义中包含bean的Class<?>的情况。（有的bean定义不包含Class<?>，只有一个factory-method来生成实例，
	此时不适用）
	
2、boolean postProcessAfterInstantiation(Object bean, String beanName)
a）bean已经通过构造函数或工厂方法实例化，但是spring的显式属性（许多Aware接口）设置和自动注入还未发生，
	此时来执行些操作
b）这是一个理想的回调用于在给定的bean实例上执行自定义字段的注入，恰好在spring的自动注入进来前。

3、PropertyValues postProcessPropertyValues(	PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)
1、处理属性值，在工厂将它们应用到指定bean之前，允许检测是否所有的依赖都已经满足，如setter方法上标有@Required注解的等。
2、允许替换掉即将应用的属性值，典型地基于原有的PropertyValues创建一个新的MutablePropertyValues实例，添加或移除特定的值。

SmartInstantiationAwareBeanPostProcessor extends InstantiationAwareBeanPostProcessor：接口，智能实例化感知bean后处理器
添加了一个回调方法用于预报一个被处理bean的最终类型
Object getEarlyBeanReference(Object bean, String beanName)
获取一个引用，用于早期地对特定bean的访问，典型地用于解析一个循环引用。
这个回调方法给后处理器一个机会来较早地暴露一个包装器，就是在目标bean实例完全初始化之前。
这个暴露的对象应该和postProcessBeforeInitialization或postProcessAfterInitialization将暴露的相同。
注意，这个方法返回的对象将被用作bean引用，除非像上面说的那两个方法返回了一个不同的包装器。
换句话说，那些回调方法要么最后暴露相同的引用，或者从那些后续的回调方法中返回原始的bean实例。
如果对于这个bean已经有一个包装器被构建好用于对这个方法的调用，默认它将被暴露作为最终bean引用。

InstantiationAwareBeanPostProcessorAdapter implements SmartInstantiationAwareBeanPostProcessor：抽象类，所有方法实现为空操作
我们应该继承自该抽象类，重写我们感兴趣的方法。这样后续框架对该系列接口的扩展将不会影响到我们的程序。
注意，只有我们确实有需要的时候才使用上面抽象类，否则，应该使用简单的BeanPostProcessor接口。

PriorityOrdered，接口，优先级顺序
1、扩展了Ordered接口，表示一个优先级顺序，如果PriorityOrdered对象和Ordered对象具有相同的顺序值，则PriorityOrdered对象先应用。
2、这主要是一个特殊目的的接口，用于首先认出优先处理的对象是非常重要的情况，甚至不要获取剩余的对象。
	一个典型的例子是spring里的优先处理的后处理器
注意，实现PriorityOrdered接口的后处理器bean，在一个特殊阶段被初始化，是在其它后处理器bean之前。这巧妙地影响它们的自动装配行为，
它们只会被装配那些不要求热切的初始化用于类型匹配的bean。

MergedBeanDefinitionPostProcessor extends BeanPostProcessor：接口，合并的bean定义后处理器
